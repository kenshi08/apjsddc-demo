formatVersion: 1
name: multi-node-k8
version: 1.0
inputs:
  master_flavor:
    type: string
    enum:
      - small
      - medium
      - large
    description: Size of Master node
    title: Size of Master node
    default: small
  node_flavor:
    type: string
    enum:
      - small
      - medium
      - large
    description: Size of Worker node
    title: Size of Worker node
    default: medium
  no_of_nodes:
    type: integer
    description: Number of Worker nodes
    title: Number of Worker nodes
    default: 2
    minimum: 1
    maximum: 4
  version:
    type: string
    enum:
      - 1.15.12-00
      - 1.17.6-00
      - 1.18.3-00
    description: Kubernetes version
    title: Kubernetes version
    default: 1.17.6-00
  lb-ip-range:
    type: string
    title: IP-Range for Load Balancer
    description: IP-Range for Load Balancer in format x.x.x.x-y.y.y.y
  network:
    type: string
    title: Node Network Segment
    description: Network to deploy K8 nodes
    enum:
      - mgmt
      - app
      - web
      - db
  environment:
    type: string
    title: Environmnet for Nodes
    description: Environment to deploy K8 nodes
    enum:
      - prod
      - dev
      - test
resources:
  k8s_node:
    type: Cloud.Machine
    properties:
      name: k8s_node
      count: '${input.no_of_nodes}'
      image: ubuntu1804
      flavor: '${input.node_flavor}'
      cloudConfig: |
        #cloud-init
        repo_update: true
        repo_upgrade: all
        packages:
         - wget
         - sshpass
        write_files:
        - content: |
            node_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
            host_name_short=$(hostname)
            host_name_long=$(hostname -f)
            echo "$node_ip    $host_name_long $host_name_short" > /root/node.txt
          path: /root/checkhostname.sh
        runcmd:
          - chmod +x /root/checkhostname.sh
          - sudo bash /root/checkhostname.sh
          - echo root:vmwarek8s|sudo chpasswd
          - sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          - sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
          - service sshd restart
          - apt-get update -y
          - apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          - sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          - apt-get update -y
          - apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 18.09 | head -1 | awk '{print $3}')
          - sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          - echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          - apt-get update -y
          - apt-get install -y kubeadm=${input.version} kubectl=${input.version} kubelet=${input.version} kubernetes-cni=0.7.5-00
          - swapoff -a
          - sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
      networks:
        - network: '${resource.k8s_vm_network.id}'
          assignment: static
      constraints:
        - tag: 'platform:vsphere'
        - tag: 'env:prod'
  k8s_master:
    type: Cloud.Machine
    dependsOn:
      - k8s_node
    properties:
      image: ubuntu1804
      flavor: '${input.master_flavor}'
      cloudConfig: |
        #cloud-init
        repo_update: true
        repo_upgrade: all
        packages:
         - wget
         - sshpass
        write_files:
        - content: |
            node_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
            host_name_short=$(hostname)
            host_name_long=$(hostname -f)
            echo "$node_ip    $host_name_long $host_name_short" > /root/master.txt
          path: /root/checkhostname.sh
        - content: |
            echo ${resource.k8s_node.address} >> /root/node_addresses.txt
            sed -i 's/\[//g' /root/node_addresses.txt
            sed -i 's/\]//g' /root/node_addresses.txt
            cat /root/master.txt >> /root/allips.txt
            value=$(cat /root/node_addresses.txt)
            arr=$(echo $value | tr "," "\n")
            var=1
            for node in $arr
            do     
            sshpass -p 'vmwarek8s' scp -o StrictHostKeyChecking=no root@$node:/root/node.txt /root/node$var.txt
            cat /root/node$var.txt >> /root/allips.txt
            var=$((var+1))
            done
            cat /root/allips.txt >> /etc/hosts
            value=$(cat /root/node_addresses.txt)
            arr=$(echo $value | tr "," "\n")
            for node in $arr
            do
            sshpass -p 'vmwarek8s' scp -o StrictHostKeyChecking=no /root/allips.txt root@$node:/root/allips.txt
            sshpass -p 'vmwarek8s' ssh -o StrictHostKeyChecking=no root@$node 'cat /root/allips.txt >> /etc/hosts'
            done
          path: /root/register_nodes.sh
        - content: |
            joincommand=$(kubeadm token create --print-join-command)
            echo $joincommand >> /root/join.sh
            value=$(cat /root/node_addresses.txt)
            arr=$(echo $value | tr "," "\n")
            for node in $arr
            do
            sshpass -p 'vmwarek8s' scp -o StrictHostKeyChecking=no /root/join.sh root@$node:/root/join.sh
            sshpass -p 'vmwarek8s' ssh -o StrictHostKeyChecking=no root@$node 'chmod +x /root/join.sh'
            sshpass -p 'vmwarek8s' ssh -o StrictHostKeyChecking=no root@$node 'sudo bash /root/join.sh'
            done
          path: /root/join_command.sh
        - content: |
            apiVersion: v1
            kind: ConfigMap
            metadata:
              namespace: metallb-system
              name: config
            data:
              config: |
                address-pools:
                - name: default
                  protocol: layer2
                  addresses:
                  - ${input.lb-ip-range}
          path: /etc/kubernetes/metallb-config.yaml
        - content: |
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: admin-user
              namespace: kubernetes-dashboard
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: admin-user
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
            - kind: ServiceAccount
              name: admin-user
              namespace: kubernetes-dashboard
          path: /etc/kubernetes/admin-user.yaml
        runcmd:
          - chmod +x /root/checkhostname.sh
          - sudo bash /root/checkhostname.sh
          - echo root:vmwarek8s|sudo chpasswd
          - sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/g' /etc/ssh/sshd_config
          - sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
          - service sshd restart
          - chmod +x /root/register_nodes.sh
          - sudo bash /root/register_nodes.sh
          - apt-get update -y
          - apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          - sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          - apt-get update -y
          - apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 18.09 | head -1 | awk '{print $3}')
          - sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
          - echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          - apt-get update -y
          - apt-get install -y kubeadm=${input.version} kubectl=${input.version} kubelet=${input.version} kubernetes-cni=0.7.5-00
          - swapoff -a
          - sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
          - node_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
          - kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=$node_ip --ignore-preflight-errors=NumCPU
          - sleep 60
          - mkdir -p $HOME/.kube
          - sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          - sudo chown $(id -u):$(id -g) $HOME/.kube/config
          - sleep 60
          - export KUBECONFIG=/etc/kubernetes/admin.conf
          - kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
          - kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/namespace.yaml
          - kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.9.3/manifests/metallb.yaml
          - kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
          - kubectl apply -f /etc/kubernetes/metallb-config.yaml
          - kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
          - kubectl apply -f /etc/kubernetes/admin-user.yaml
          - kubectl config view --minify --raw --output 'jsonpath={..cluster.certificate-authority-data}' | base64 -d | openssl x509 -text -out - > /etc/kubernetes/certificate.txt
          - export SECRET_NAME=$(kubectl -n kubernetes-dashboard get secret | grep admin-user | cut -f1 -d ' ')
          - export TOKEN=$(kubectl -n kubernetes-dashboard describe secret $SECRET_NAME | grep -E '^token' | cut -f2 -d':' | tr -d " ")
          - echo $TOKEN >> /etc/kubernetes/token.txt
          - sudo curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          - chmod 700 get_helm.sh
          - sudo ./get_helm.sh
          - chmod +x /root/join_command.sh
          - sudo bash /root/join_command.sh
      networks:
        - network: '${resource.k8s_vm_network.id}'
          assignment: static
      constraints:
        - tag: 'platform:vsphere'
        - tag: 'env:${input.environment}'
  k8s_vm_network:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: 'function:${input.network}'